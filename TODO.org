* Learn about Scripting
[[https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/Scripting][Dota 2 Scripting]]
[[http://www.lua.org/manual/5.3/][Lua Reference]]

Lua things may go in /game. Must other stuff in /game is not helpful.

[[https://github.com/Lattyware/itemdraft][item draft]] is a good example.

** Client-Server communications
There are [[https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/Custom_Game_Events][Custom Games Events]], which can be used from Lua with the =CustomGameEventManager=. You can subscribe to these on the client.

[[https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/Custom_Nettables][Custom Net Tables]] stores key-value pairs. They send events to the client when a key changes.

** What runs where?
There is Lua on both client and server.
script_attach_debugger cl_script_attach_debugger

Vconsole2 is what runs in the workshop tools. What does it have access to?

** Panorama
This is an XML/CSS/JS UI framework.

Panels are elements.

*** Layout

#+BEGIN_SRC xml
  <DOTAItemImage itemname="item_clarity" />

  <DOTAHeroImage heroid="5" />
  <DOTAHeroImage heroname="npc_dota_hero_nevermore" />
  <DOTAHeroImage heroname="npc_dota_hero_pudge" heroimagestyle="portrait" />

  <DOTAAvatarImage steamid="-1" />
  <DOTAUserName steamid="-1" />

  <Button onactivate="" />
  <RadioButton checked="checked" group="Demo" id="Demo1" text="Radio button 1"/>
  <Image src="file://{images}/custom_game/thing.png"/>
  <Label text="My label text"/>
#+END_SRC

*** Style
=flow-children= deterines if layout if across or down. Options are: /down/, /right/, /down-wrap/, /right-wrap/, /none/.

=horizontal-align= and =vertical-align= allow positioning.

=x= and =y= allow really precise positioning.

=transform= exists.

*** Localization
game/dota_addons/card-draft/panorama/localization/addon_en.txt

Refer to messages using text="#message"

You can also do it in JavaScript:
#+BEGIN_SRC js2
  $.Localize("#LocalizationToken");
#+END_SRC

*** Javascript
There's a =$= thing which can select one panel at a time =$('#SomePanel')=.

=$.Msg()= logs things.

Example of creating a new panel with some XML:
#+BEGIN_SRC js2
  var parentPanel = $.ContextPanel(); // the root panel of the current XML context
  var newChildPanel = $.CreatePanel( "Panel", parentPanel, "ChildPanelID" );
  newChildPanel.BLoadLayout( "file://{resources}/layout/custom_game/new_panel.xml", false, false );
#+END_SRC

=panel.style.property= gets CSS things.

** Libraries
Considering using the Barebones timers library?

** Empty Abilities
Found in [[https://github.com/Lattyware/itemdraft/blob/master/game/dota_addons/itemdraft/scripts/npc/npc_heroes_custom.txt][npc_heroes_custom.txt]]:

(Why these?)

"Ability1"         "invoker_empty1"
"Ability2"         "invoker_empty2"
"Ability3"         "doom_bringer_empty1"
"Ability4"         "doom_bringer_empty2"
"Ability5"         "wisp_empty1"
"Ability6"         "wisp_empty2"

** Localization
game\dota_addons\card_draft\resource\addon_english.txt
game\dota_addons\card_draft\panorama\localization\addon_english.txt (does this come from content originally?)

failed to load file "resource/addon_english.txt".

** addon_game_mode.lua
require other files.

GameMode:InitGameMode()

** vscripts/gamemode.lua
Provides some hooks:

=GameRules:EnableCustomGameSetupAutoLaunch(false)= iniside InitGameMode

=function GameMode:OnAllPlayersLoaded()= for hero selection

=GameMode:OnHeroInGame(hero)= first spawn - can change abilities here?

* Plan
** Device to assign starting hands
Deal each player the right number of each type of cards, ensuring no overlap.

 1. Fix loading the heroes
 2. Fix loading the abilities

*** Finding Heroes, Abilities
I think for now I will have to make a text file list? Ok.

 + CreateHeroForPlay("unitname", player) will let us set the hero
 + SetCustomGameForceHero("heroname") hmmmmmm
 + Entities
  + FindByClassname(nil)
  + FindAllByClassname
  + FindByName(nil)
  + First(), Next(previousEntity)

 + CDOTABaseAbility
  + GetHeroLevelRequiredToUpgrade
  + IsItem
  + IsTrained
  + SetAbilityIndex

 + CBasePlayer
 + CDOTAPlayer
  + GetPlayerID
  + GetPlayer(id)
  + GetPlayerName()
  + GetSelectedHeroEntity()
  + ReplaceHeroWith(class, gold, xp)

 + CDOTA_BaseNPC
  + AddAbility(name)
  + GetAbilityByIndex()
  + GetAbilityCount()
  + RemoveAbility(name)

 + CDOTA_BaseNPC_Hero

 + CDOTA_GameRules
  + SetHeroSelectionTime(0) may be useful before we unpause?

 + CDOTA_CustomUIManager
  + DynamicHud_Create
  + DynamicHud_Destroy

** Display cards and choices
 1. Make some dummy card data
 2. Display some cards with the dummy data
 3. Make some dummy 'select abilities' data
 4. Disable some cards based on what's previously selected.
 5. Display choices based on whether there are any eligible cards? (Options are choose, pass?. Maybe we have no options?)

** Plumbing
 1. Fire event when a person selects a card.
 2. Fire an event when new hands are ready.

** Pass cards around after players all made their choice

** Card eligibility and automatic plays

** Timer and random plays

** English Localization
Custom game name should appear in the right place.

* Future Plans
